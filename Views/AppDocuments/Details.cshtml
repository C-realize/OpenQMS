@*
This file is part of the OpenQMS.net project (https://github.com/C-realize/OpenQMS).
Copyright (C) 2022-2025  C-realize IT Services SRL (https://www.c-realize.com)

This program is offered under a commercial and under the AGPL license.
For commercial licensing, contact us at https://www.c-realize.com/contact.  For AGPL licensing, see below.

AGPL:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see http://www.gnu.org/licenses/.
*@

@model OpenQMS.Models.AppDocument

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Details</h1>

<h4>Document</h4>
<hr />
<div>
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.DocumentId)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.DocumentId)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Title)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Title)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Version)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Version)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.AuthoredBy)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.AuthoredBy)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.AuthoredOn)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.AuthoredOn)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.ApprovedBy)
        </dt>
        <dd class="col-sm-10">
            @(Model.ApprovedBy ?? "-")
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.ApprovedOn)
        </dt>
        <dd class="col-sm-10">
            @(Model.ApprovedOn.HasValue ? Model.ApprovedOn : "-")
        </dd>
@*         <dt class="col-sm-2">
            File Path
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FilePath)
        </dd>
 *@    
         <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Status)
        </dd>
    </dl>
    <a type="button" class="col-sm-2 btn btn-primary" asp-action="DownloadFile" asp-route-id="@Model.Id">Download</a>
</div>

<br />
<div class="row">
    <div class="col-md-4">
        @if (Model.Status != AppDocument.DocumentStatus.Approved && Model.Status != AppDocument.DocumentStatus.Obsolete)
        {
            @if ((await AuthorizationService.AuthorizeAsync(User, Model, DocumentOperations.Approve)).Succeeded)
            {
                <form style="display:inline;" method="post">
                    <input type="hidden" name="id" value="@Model.Id" />
                    <input type="hidden" name="title" value="@Model.Title" />
                    <input type="hidden" name="status" value="Approved" />
                    <div class="form-group">
                        <label>Email</label>
                        <input type="email" name="InputEmail" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Password</label>
                        <input type="password" name="InputPassword" class="form-control" />
                    </div>
                    <br />
                    <button type="submit" class="col-sm-4 btn btn-xs btn-success">Approve</button>
                </form>
            }
        }

        @if ((Model.Status != AppDocument.DocumentStatus.Approved) && (Model.Status != AppDocument.DocumentStatus.Rejected) && (Model.Status != AppDocument.DocumentStatus.Obsolete))
        {
            @if ((await AuthorizationService.AuthorizeAsync(User, Model, DocumentOperations.Reject)).Succeeded)
            {
                <form style="display:inline;" method="post">
                    <input type="hidden" name="id" value="@Model.Id" />
                    <input type="hidden" name="title" value="@Model.Title" />
                    <input type="hidden" name="status" value="Rejected" />
                    <button type="submit" class="col-sm-4 btn btn-xs btn-danger">Reject</button>
                    <br />
                    Sign pdf documents digitally with <a href="https://github.com/itext/itext-dotnet">iText&reg;</a>
                </form>
            }
        }
    </div>
</div>

<div>
    <br />
    @if ((await AuthorizationService.AuthorizeAsync(User, Model, DocumentOperations.Update)).Succeeded)
    {
        <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
        <text>|</text>
    }
    <a asp-action="Index">Back to List</a>
</div>