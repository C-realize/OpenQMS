@model PaginatedList<OpenQMS.Models.AppDocument>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Index</h1>

<h4>Documents</h4>
<hr />

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by Title: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Title</a>
            </th>
            <th>
                Version
            </th>
            <th>
                Status
            </th>
            <th>
                Authored By
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Authored On</a>
            </th>
            <th>
                Approved By
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["ApproveDateSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Approved On</a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model) 
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Version)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Status)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AuthoredBy)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AuthoredOn)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ApprovedBy)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ApprovedOn)
                </td>
                <td>
                    @if ((await AuthorizationService.AuthorizeAsync(User, item, DocumentOperations.Update)).Succeeded)
                    {
                        <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> 
                        <text> | </text>
                    }
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a>
                    @if (item.Status!=AppDocument.DocumentStatus.Approved && (await AuthorizationService.AuthorizeAsync(User, item, DocumentOperations.Delete)).Succeeded)
                    {
                        <text> | </text>
                        <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>    
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<p>
    <a asp-action="Create">Create New</a>
</p>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>

<a><---Page @Model.PageIndex of @Model.TotalPages---></></a>

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
